
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_double_beta_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_double_beta");
    reader.add_event(43, 43, "end", "model_double_beta");
    return reader;
}

class model_double_beta : public prob_grad {
private:
    int n_probes;
    int n_samples;
    int n_groups;
    vector<vector<double> > BS;
    vector<vector<double> > OX;
    vector<int> group_id;
    vector_d alpha;
    double nu_shape;
    double nu_mean;
public:
    model_double_beta(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_double_beta(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_double_beta_namespace::model_double_beta";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "n_probes", "int", context__.to_vec());
        n_probes = int(0);
        vals_i__ = context__.vals_i("n_probes");
        pos__ = 0;
        n_probes = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_samples", "int", context__.to_vec());
        n_samples = int(0);
        vals_i__ = context__.vals_i("n_samples");
        pos__ = 0;
        n_samples = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_groups", "int", context__.to_vec());
        n_groups = int(0);
        vals_i__ = context__.vals_i("n_groups");
        pos__ = 0;
        n_groups = vals_i__[pos__++];
        validate_non_negative_index("BS", "n_probes", n_probes);
        validate_non_negative_index("BS", "n_samples", n_samples);
        context__.validate_dims("data initialization", "BS", "double", context__.to_vec(n_probes,n_samples));
        validate_non_negative_index("BS", "n_probes", n_probes);
        validate_non_negative_index("BS", "n_samples", n_samples);
        BS = std::vector<std::vector<double> >(n_probes,std::vector<double>(n_samples,double(0)));
        vals_r__ = context__.vals_r("BS");
        pos__ = 0;
        size_t BS_limit_1__ = n_samples;
        for (size_t i_1__ = 0; i_1__ < BS_limit_1__; ++i_1__) {
            size_t BS_limit_0__ = n_probes;
            for (size_t i_0__ = 0; i_0__ < BS_limit_0__; ++i_0__) {
                BS[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("OX", "n_probes", n_probes);
        validate_non_negative_index("OX", "n_samples", n_samples);
        context__.validate_dims("data initialization", "OX", "double", context__.to_vec(n_probes,n_samples));
        validate_non_negative_index("OX", "n_probes", n_probes);
        validate_non_negative_index("OX", "n_samples", n_samples);
        OX = std::vector<std::vector<double> >(n_probes,std::vector<double>(n_samples,double(0)));
        vals_r__ = context__.vals_r("OX");
        pos__ = 0;
        size_t OX_limit_1__ = n_samples;
        for (size_t i_1__ = 0; i_1__ < OX_limit_1__; ++i_1__) {
            size_t OX_limit_0__ = n_probes;
            for (size_t i_0__ = 0; i_0__ < OX_limit_0__; ++i_0__) {
                OX[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("group_id", "n_samples", n_samples);
        context__.validate_dims("data initialization", "group_id", "int", context__.to_vec(n_samples));
        validate_non_negative_index("group_id", "n_samples", n_samples);
        group_id = std::vector<int>(n_samples,int(0));
        vals_i__ = context__.vals_i("group_id");
        pos__ = 0;
        size_t group_id_limit_0__ = n_samples;
        for (size_t i_0__ = 0; i_0__ < group_id_limit_0__; ++i_0__) {
            group_id[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("alpha", "3", 3);
        context__.validate_dims("data initialization", "alpha", "vector_d", context__.to_vec(3));
        validate_non_negative_index("alpha", "3", 3);
        alpha = vector_d(static_cast<Eigen::VectorXd::Index>(3));
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0;
        size_t alpha_i_vec_lim__ = 3;
        for (size_t i_vec__ = 0; i_vec__ < alpha_i_vec_lim__; ++i_vec__) {
            alpha[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "nu_shape", "double", context__.to_vec());
        nu_shape = double(0);
        vals_r__ = context__.vals_r("nu_shape");
        pos__ = 0;
        nu_shape = vals_r__[pos__++];
        context__.validate_dims("data initialization", "nu_mean", "double", context__.to_vec());
        nu_mean = double(0);
        vals_r__ = context__.vals_r("nu_mean");
        pos__ = 0;
        nu_mean = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"n_probes",n_probes,1);
        check_greater_or_equal(function__,"n_samples",n_samples,1);
        check_greater_or_equal(function__,"n_groups",n_groups,1);
        for (int k0__ = 0; k0__ < n_probes; ++k0__) {
            for (int k1__ = 0; k1__ < n_samples; ++k1__) {
                check_greater_or_equal(function__,"BS[k0__][k1__]",BS[k0__][k1__],0);
                check_less_or_equal(function__,"BS[k0__][k1__]",BS[k0__][k1__],1);
            }
        }
        for (int k0__ = 0; k0__ < n_probes; ++k0__) {
            for (int k1__ = 0; k1__ < n_samples; ++k1__) {
                check_greater_or_equal(function__,"OX[k0__][k1__]",OX[k0__][k1__],0);
                check_less_or_equal(function__,"OX[k0__][k1__]",OX[k0__][k1__],1);
            }
        }
        for (int k0__ = 0; k0__ < n_samples; ++k0__) {
            check_greater_or_equal(function__,"group_id[k0__]",group_id[k0__],1);
        }
        check_greater_or_equal(function__,"alpha",alpha,1);
        check_greater_or_equal(function__,"nu_shape",nu_shape,0);
        check_greater_or_equal(function__,"nu_mean",nu_mean,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        validate_non_negative_index("meth_state", "3", 3);
        validate_non_negative_index("meth_state", "n_groups", n_groups);
        num_params_r__ += (3 - 1) * n_groups;
    }

    ~model_double_beta() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("nu_minus_one")))
            throw std::runtime_error("variable nu_minus_one missing");
        vals_r__ = context__.vals_r("nu_minus_one");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_minus_one", "double", context__.to_vec());
        // generate_declaration nu_minus_one
        double nu_minus_one(0);
        nu_minus_one = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,nu_minus_one);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_minus_one: ") + e.what());
        }

        if (!(context__.contains_r("meth_state")))
            throw std::runtime_error("variable meth_state missing");
        vals_r__ = context__.vals_r("meth_state");
        pos__ = 0U;
        validate_non_negative_index("meth_state", "n_groups", n_groups);
        validate_non_negative_index("meth_state", "3", 3);
        context__.validate_dims("initialization", "meth_state", "vector_d", context__.to_vec(n_groups,3));
        // generate_declaration meth_state
        std::vector<vector_d> meth_state(n_groups,vector_d(static_cast<Eigen::VectorXd::Index>(3)));
        for (int j1__ = 0U; j1__ < 3; ++j1__)
            for (int i0__ = 0U; i0__ < n_groups; ++i0__)
                meth_state[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            try {
            writer__.simplex_unconstrain(meth_state[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable meth_state: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ nu_minus_one;
        (void) nu_minus_one;  // dummy to suppress unused var warning
        if (jacobian__)
            nu_minus_one = in__.scalar_lb_constrain(0,lp__);
        else
            nu_minus_one = in__.scalar_lb_constrain(0);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > meth_state;
        size_t dim_meth_state_0__ = n_groups;
        meth_state.reserve(dim_meth_state_0__);
        for (size_t k_0__ = 0; k_0__ < dim_meth_state_0__; ++k_0__) {
            if (jacobian__)
                meth_state.push_back(in__.simplex_constrain(3,lp__));
            else
                meth_state.push_back(in__.simplex_constrain(3));
        }


        // transformed parameters
        validate_non_negative_index("BS_alpha", "n_groups", n_groups);
        vector<T__> BS_alpha(n_groups);
        stan::math::initialize(BS_alpha, DUMMY_VAR__);
        stan::math::fill(BS_alpha,DUMMY_VAR__);
        validate_non_negative_index("BS_beta", "n_groups", n_groups);
        vector<T__> BS_beta(n_groups);
        stan::math::initialize(BS_beta, DUMMY_VAR__);
        stan::math::fill(BS_beta,DUMMY_VAR__);
        validate_non_negative_index("OX_alpha", "n_groups", n_groups);
        vector<T__> OX_alpha(n_groups);
        stan::math::initialize(OX_alpha, DUMMY_VAR__);
        stan::math::fill(OX_alpha,DUMMY_VAR__);
        validate_non_negative_index("OX_beta", "n_groups", n_groups);
        vector<T__> OX_beta(n_groups);
        stan::math::initialize(OX_beta, DUMMY_VAR__);
        stan::math::fill(OX_beta,DUMMY_VAR__);


        try {
            for (int j = 1; j <= n_groups; ++j) {

                stan::math::assign(get_base1_lhs(OX_alpha,j,"OX_alpha",1), (get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2) * (nu_minus_one + 1)));
                stan::math::assign(get_base1_lhs(OX_beta,j,"OX_beta",1), ((1 - get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2)) * (nu_minus_one + 1)));
                stan::math::assign(get_base1_lhs(BS_alpha,j,"BS_alpha",1), ((get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2) + get_base1(get_base1(meth_state,j,"meth_state",1),3,"meth_state",2)) * (nu_minus_one + 1)));
                stan::math::assign(get_base1_lhs(BS_beta,j,"BS_beta",1), (((1 - get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2)) - get_base1(get_base1(meth_state,j,"meth_state",1),3,"meth_state",2)) * (nu_minus_one + 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n_groups; ++i0__) {
            if (stan::math::is_uninitialized(BS_alpha[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: BS_alpha" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_groups; ++i0__) {
            if (stan::math::is_uninitialized(BS_beta[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: BS_beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_groups; ++i0__) {
            if (stan::math::is_uninitialized(OX_alpha[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: OX_alpha" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_groups; ++i0__) {
            if (stan::math::is_uninitialized(OX_beta[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: OX_beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"BS_alpha[k0__]",BS_alpha[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"BS_beta[k0__]",BS_beta[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"OX_alpha[k0__]",OX_alpha[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"OX_beta[k0__]",OX_beta[k0__],0);
        }

        // model body
        try {

            lp_accum__.add(gamma_log<propto__>(nu_minus_one, nu_shape, (nu_shape / nu_mean)));
            for (int j = 1; j <= n_groups; ++j) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(meth_state,j,"meth_state",1), alpha));
            }
            for (int j = 1; j <= n_samples; ++j) {

                lp_accum__.add(beta_log<propto__>(stan::model::rvalue(BS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "BS"), get_base1(BS_alpha,get_base1(group_id,j,"group_id",1),"BS_alpha",1), get_base1(BS_beta,get_base1(group_id,j,"group_id",1),"BS_beta",1)));
                lp_accum__.add(beta_log<propto__>(stan::model::rvalue(OX, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "OX"), get_base1(OX_alpha,get_base1(group_id,j,"group_id",1),"OX_alpha",1), get_base1(OX_beta,get_base1(group_id,j,"group_id",1),"OX_beta",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("nu_minus_one");
        names__.push_back("meth_state");
        names__.push_back("BS_alpha");
        names__.push_back("BS_beta");
        names__.push_back("OX_alpha");
        names__.push_back("OX_beta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_double_beta_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double nu_minus_one = in__.scalar_lb_constrain(0);
        vector<vector_d> meth_state;
        size_t dim_meth_state_0__ = n_groups;
        for (size_t k_0__ = 0; k_0__ < dim_meth_state_0__; ++k_0__) {
            meth_state.push_back(in__.simplex_constrain(3));
        }
        vars__.push_back(nu_minus_one);
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
                vars__.push_back(meth_state[k_0__][k_1__]);
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("BS_alpha", "n_groups", n_groups);
        vector<double> BS_alpha(n_groups, 0.0);
        stan::math::initialize(BS_alpha, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(BS_alpha,DUMMY_VAR__);
        validate_non_negative_index("BS_beta", "n_groups", n_groups);
        vector<double> BS_beta(n_groups, 0.0);
        stan::math::initialize(BS_beta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(BS_beta,DUMMY_VAR__);
        validate_non_negative_index("OX_alpha", "n_groups", n_groups);
        vector<double> OX_alpha(n_groups, 0.0);
        stan::math::initialize(OX_alpha, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(OX_alpha,DUMMY_VAR__);
        validate_non_negative_index("OX_beta", "n_groups", n_groups);
        vector<double> OX_beta(n_groups, 0.0);
        stan::math::initialize(OX_beta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(OX_beta,DUMMY_VAR__);


        try {
            for (int j = 1; j <= n_groups; ++j) {

                stan::math::assign(get_base1_lhs(OX_alpha,j,"OX_alpha",1), (get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2) * (nu_minus_one + 1)));
                stan::math::assign(get_base1_lhs(OX_beta,j,"OX_beta",1), ((1 - get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2)) * (nu_minus_one + 1)));
                stan::math::assign(get_base1_lhs(BS_alpha,j,"BS_alpha",1), ((get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2) + get_base1(get_base1(meth_state,j,"meth_state",1),3,"meth_state",2)) * (nu_minus_one + 1)));
                stan::math::assign(get_base1_lhs(BS_beta,j,"BS_beta",1), (((1 - get_base1(get_base1(meth_state,j,"meth_state",1),2,"meth_state",2)) - get_base1(get_base1(meth_state,j,"meth_state",1),3,"meth_state",2)) * (nu_minus_one + 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"BS_alpha[k0__]",BS_alpha[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"BS_beta[k0__]",BS_beta[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"OX_alpha[k0__]",OX_alpha[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_groups; ++k0__) {
            check_greater_or_equal(function__,"OX_beta[k0__]",OX_beta[k0__],0);
        }

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(BS_alpha[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(BS_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(OX_alpha[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(OX_beta[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_double_beta";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_minus_one";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "meth_state" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "BS_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "BS_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "OX_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "OX_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_minus_one";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (3 - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "meth_state" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "BS_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "BS_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "OX_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "OX_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}




#endif
